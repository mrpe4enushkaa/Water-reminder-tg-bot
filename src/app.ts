import TelegramBot from "node-telegram-bot-api";
import { ConfigService } from "./config/config.service";
import { RedisService } from "./databases/redis/redis.service";
import { Command } from "./commands/abstract.command";
import { CallbackQueryCommand } from "./commands/command.callback-query";
import { StartCommand } from "./commands/command.start";
import { ParametersCommand } from "./commands/command.parameters";
import { DrinkWaterCommand } from "./commands/command.drink-water";
import { UserProvidedData } from "./models/user-provided-data.type";
import { HelpCommand } from "./commands/command.help";
import { TimeCommand } from "./commands/command.time";
import { ContinueCommand } from "./commands/command.continue";
import { StopCommand } from "./commands/command.stop";
import { MongoService } from "./databases/mongo/mongo.service";

class Bot {
    private bot: TelegramBot;
    private mongo: MongoService;
    private redis: RedisService;
    private commands: Command[] = [];

    private userProvidedData: Map<number, UserProvidedData> = new Map<number, UserProvidedData>;

    constructor(private readonly token: string) {
        this.bot = new TelegramBot(this.token, { polling: true });
        this.mongo = new MongoService();
        this.redis = new RedisService();
    }

    private setCommands(): void {
        this.bot.setMyCommands([
            { command: "/start", description: "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É" },
            { command: "/add_parameters", description: "‚ûï –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≤–µ—Å –∏ —Ç.–¥.)" },
            { command: "/edit_parameters", description: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" },
            { command: "/delete_parameters", description: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ" },
            { command: "/info_parameters", description: "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" },
            { command: "/drink", description: "üíß –û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –≤—ã –≤—ã–ø–∏–ª–∏ –≤–æ–¥—É" },
            { command: "/help", description: "‚ÑπÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞" },
            { command: "/time", description: "‚è≥ –£–∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" },
            { command: "/continue", description: "üîî –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ" },
            { command: "/stop", description: "üîï –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" },
            // { command: "/change_language", description: "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞" },
        ], {
            language_code: "ru"
        });
    }

    private registerCommands(): void {
        this.commands = [
            new CallbackQueryCommand(this.bot, this.userProvidedData, this.redis),
            new StartCommand(this.bot, this.userProvidedData, this.redis),
            new ParametersCommand(this.bot, this.userProvidedData, this.redis),
            new DrinkWaterCommand(this.bot, this.userProvidedData, this.redis),
            new HelpCommand(this.bot, this.userProvidedData, this.redis),
            new TimeCommand(this.bot, this.userProvidedData, this.redis),
            new ContinueCommand(this.bot, this.userProvidedData, this.redis),
            new StopCommand(this.bot, this.userProvidedData, this.redis)
        ];

        for (const command of this.commands) {
            command.handle();
        }
    }

    public async init(): Promise<void> {
        this.setCommands();
        this.registerCommands();
        this.redis.handle();
        await this.mongo.handle();
        this.mongo.createUsersSchema();
    }
}

const config = new ConfigService();

const bot = new Bot(config.get("BOT_TOKEN"));
bot.init();